start : program 	<Line: 1-8>
 program : program unit 	<Line: 1-8>
  program : unit 	<Line: 1-3>
   unit : func_definition 	<Line: 1-3>
    func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-3>
     type_specifier : INT	<Line: 1-1>
      INT : int	<Line: 1>
     ID : main	<Line: 1>
     LPAREN : (	<Line: 1>
     RPAREN : )	<Line: 1>
     compound_statement : LCURL statements RCURL 	<Line: 1-3>
      LCURL : {	<Line: 1>
      statements : statement 	<Line: 2-2>
       statement : RETURN expression SEMICOLON 	<Line: 2-2>
        RETURN : return	<Line: 2>
        expression : logic_expression 	<Line: 2-2>
         logic_expression : rel_expression 	<Line: 2-2>
          rel_expression : simple_expression 	<Line: 2-2>
           simple_expression : term 	<Line: 2-2>
            term : unary_expression 	<Line: 2-2>
             unary_expression : factor 	<Line: 2-2>
              factor : CONST_INT 	<Line: 2-2>
               CONST_INT : 0	<Line: 2>
        SEMICOLON : ;	<Line: 2>
      RCURL : }	<Line: 3>
  unit : func_definition 	<Line: 5-8>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 5-8>
    compound_statement : LCURL statements RCURL 	<Line: 5-8>
     LCURL : {	<Line: 5>
     statements : statements statement 	<Line: 6-7>
      statements : statement 	<Line: 6-6>
       statement : var_declaration 	<Line: 6-6>
        var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 6-6>
         type_specifier : INT	<Line: 6-6>
          INT : int	<Line: 6>
         declaration_list : ID 	<Line: 6-6>
          ID : a	<Line: 6>
         SEMICOLON : ;	<Line: 6>
      statement : expression_statement 	<Line: 7-7>
       expression_statement : expression SEMICOLON 	<Line: 7-7>
        expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
         variable : ID 	<Line: 7-7>
          ID : a	<Line: 7>
         ASSIGNOP : =	<Line: 7>
         logic_expression : rel_expression 	<Line: 7-7>
          rel_expression : simple_expression 	<Line: 7-7>
           simple_expression : term 	<Line: 7-7>
            term : unary_expression 	<Line: 7-7>
             unary_expression : factor 	<Line: 7-7>
              factor : CONST_INT 	<Line: 7-7>
               CONST_INT : 1	<Line: 7>
        SEMICOLON : ;	<Line: 7>
     RCURL : }	<Line: 8>
