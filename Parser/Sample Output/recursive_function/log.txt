Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme factorial found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <IF> Lexeme if found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <ID> Lexeme n found
Line# 2: Token <RELOP> Lexeme == found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 2: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 2: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression RELOP simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
Line# 2: Token <RETURN> Lexeme return found
Line# 2: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 2: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
Line# 3: Token <ELSE> Lexeme else found
Line# 3: Token <RETURN> Lexeme return found
Line# 3: Token <ID> Lexeme factorial found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <ID> Lexeme n found
Line# 3: Token <ADDOP> Lexeme - found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 3: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 3: Token <RPAREN> Lexeme ) found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 3: Token <MULOP> Lexeme * found
Line# 3: Token <ID> Lexeme n found
Line# 3: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statement : IF LPAREN expression RPAREN statement ELSE statement 
statements : statement 
Line# 4: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	1--> <n,INT> 
	ScopeTable# 1
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : unit 
Line# 6: Token <INT> Lexeme int found
type_specifier : INT
Line# 6: Token <ID> Lexeme main found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <LCURL> Lexeme { found
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme a found
Line# 7: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 8: Token <ID> Lexeme factorial found
Line# 8: Token <LPAREN> Lexeme ( found
Line# 8: Token <CONST_INT> Lexeme 4 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <RPAREN> Lexeme ) found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 9: Token <PRINTLN> Lexeme println found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 10: Token <RETURN> Lexeme return found
Line# 10: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	10--> <a,INT> 
	ScopeTable# 1
	1--> <factorial,FUNCTION,INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
	ScopeTable# 1
	1--> <factorial,FUNCTION,INT> 
	2--> <main,FUNCTION,INT> 
Total lines: 11
Total errors: 0
