Line# 1: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 1: Token <ID> Lexeme f1 found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme a1 found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 3: Token <INT> Lexeme int found
type_specifier : INT
Line# 3: Token <ID> Lexeme b found
Line# 3: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statements statement 
Line# 4: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	5--> <a1,INT> 
	11--> <b,INT> 
	ScopeTable# 1
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : unit 
Line# 5: Token <INT> Lexeme int found
type_specifier : INT
Line# 5: Token <ID> Lexeme k found
Line# 5: Token <LSQUARE> Lexeme [ found
Line# 5: Token <CONST_INT> Lexeme 10 found
Line# 5: Token <RSQUARE> Lexeme ] found
declaration_list : ID LSQUARE CONST_INT RSQUARE 
Line# 5: Token <SEMICOLON> Lexeme ; found
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : program unit 
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme main found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme a found
Line# 8: Token <COMMA> Lexeme , found
declaration_list : ID 
Line# 8: Token <ID> Lexeme b found
Line# 8: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID  
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 9: Token <ID> Lexeme a found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 9: Token <CONST_FLOAT> Lexeme 2.32 found
factor : CONST_FLOAT 
unary_expression : factor 
term : unary_expression 
Line# 9: Token <MULOP> Lexeme / found
Line# 9: Token <ID> Lexeme b found
Line# 9: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : term MULOP unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 10: Token <ID> Lexeme k found
Line# 10: Token <LSQUARE> Lexeme [ found
Line# 10: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 10: Token <RSQUARE> Lexeme ] found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
variable : ID LSQUARE expression RSQUARE 
Line# 10: Token <ASSIGNOP> Lexeme = found
Line# 10: Token <CONST_FLOAT> Lexeme 1.21 found
factor : CONST_FLOAT 
unary_expression : factor 
term : unary_expression 
Line# 10: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 11: Token <RETURN> Lexeme return found
Line# 11: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 11: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	10--> <a,INT> 
	11--> <b,INT> 
	ScopeTable# 1
	2--> <f1,FUNCTION,VOID> 
	9--> <k,ARRAY> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
	ScopeTable# 1
	2--> <f1,FUNCTION,VOID> <main,FUNCTION,INT> 
	9--> <k,ARRAY> 
Total lines: 14
Total errors: 2
