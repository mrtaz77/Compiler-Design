start : program 	<Line: 1-21>
 program : unit 	<Line: 1-21>
  unit : func_definition 	<Line: 1-21>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-21>
    type_specifier : INT	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-21>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 2-20>
      statements : statements statement 	<Line: 2-19>
       statements : statements statement 	<Line: 2-18>
        statements : statements statement 	<Line: 2-17>
         statements : statements statement 	<Line: 2-5>
          statements : statements statement 	<Line: 2-4>
           statements : statements statement 	<Line: 2-3>
            statements : statement 	<Line: 2-2>
             statement : var_declaration 	<Line: 2-2>
              var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
               type_specifier : INT	<Line: 2-2>
                INT : int	<Line: 2>
               declaration_list : ID 	<Line: 2-2>
                ID : a	<Line: 2>
               SEMICOLON : ;	<Line: 2>
            statement : var_declaration 	<Line: 3-3>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 3-3>
              type_specifier : INT	<Line: 3-3>
               INT : int	<Line: 3>
              declaration_list : ID 	<Line: 3-3>
               ID : b	<Line: 3>
              SEMICOLON : ;	<Line: 3>
           statement : expression_statement 	<Line: 4-4>
            expression_statement : expression SEMICOLON 	<Line: 4-4>
             expression : variable ASSIGNOP logic_expression 	<Line: 4-4>
              variable : ID 	<Line: 4-4>
               ID : a	<Line: 4>
              ASSIGNOP : =	<Line: 4>
              logic_expression : rel_expression 	<Line: 4-4>
               rel_expression : simple_expression 	<Line: 4-4>
                simple_expression : term 	<Line: 4-4>
                 term : unary_expression 	<Line: 4-4>
                  unary_expression : factor 	<Line: 4-4>
                   factor : CONST_INT 	<Line: 4-4>
                    CONST_INT : 2	<Line: 4>
             SEMICOLON : ;	<Line: 4>
          statement : expression_statement 	<Line: 5-5>
           expression_statement : expression SEMICOLON 	<Line: 5-5>
            expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
             variable : ID 	<Line: 5-5>
              ID : b	<Line: 5>
             ASSIGNOP : =	<Line: 5>
             logic_expression : rel_expression 	<Line: 5-5>
              rel_expression : simple_expression 	<Line: 5-5>
               simple_expression : term 	<Line: 5-5>
                term : unary_expression 	<Line: 5-5>
                 unary_expression : factor 	<Line: 5-5>
                  factor : CONST_INT 	<Line: 5-5>
                   CONST_INT : 3	<Line: 5>
            SEMICOLON : ;	<Line: 5>
         statement : WHILE LPAREN expression RPAREN statement 	<Line: 6-17>
          WHILE : while	<Line: 6>
          LPAREN : (	<Line: 6>
          expression : logic_expression 	<Line: 6-6>
           logic_expression : rel_expression 	<Line: 6-6>
            rel_expression : simple_expression RELOP simple_expression 	<Line: 6-6>
             simple_expression : term 	<Line: 6-6>
              term : unary_expression 	<Line: 6-6>
               unary_expression : factor 	<Line: 6-6>
                factor : variable 	<Line: 6-6>
                 variable : ID 	<Line: 6-6>
                  ID : a	<Line: 6>
             RELOP : >	<Line: 6>
             simple_expression : term 	<Line: 6-6>
              term : unary_expression 	<Line: 6-6>
               unary_expression : factor 	<Line: 6-6>
                factor : CONST_INT 	<Line: 6-6>
                 CONST_INT : 0	<Line: 6>
          RPAREN : )	<Line: 6>
          statement : compound_statement 	<Line: 6-17>
           compound_statement : LCURL statements RCURL 	<Line: 6-17>
            LCURL : {	<Line: 6>
            statements : statements statement 	<Line: 7-16>
             statements : statements statement 	<Line: 7-15>
              statements : statements statement 	<Line: 7-14>
               statements : statements statement 	<Line: 7-8>
                statements : statement 	<Line: 7-7>
                 statement : var_declaration 	<Line: 7-7>
                  var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 7-7>
                   type_specifier : INT	<Line: 7-7>
                    INT : int	<Line: 7>
                   declaration_list : ID 	<Line: 7-7>
                    ID : b	<Line: 7>
                   SEMICOLON : ;	<Line: 7>
                statement : expression_statement 	<Line: 8-8>
                 expression_statement : expression SEMICOLON 	<Line: 8-8>
                  expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                   variable : ID 	<Line: 8-8>
                    ID : b	<Line: 8>
                   ASSIGNOP : =	<Line: 8>
                   logic_expression : rel_expression 	<Line: 8-8>
                    rel_expression : simple_expression 	<Line: 8-8>
                     simple_expression : term 	<Line: 8-8>
                      term : unary_expression 	<Line: 8-8>
                       unary_expression : factor 	<Line: 8-8>
                        factor : variable 	<Line: 8-8>
                         variable : ID 	<Line: 8-8>
                          ID : a	<Line: 8>
                  SEMICOLON : ;	<Line: 8>
               statement : WHILE LPAREN expression RPAREN statement 	<Line: 9-14>
                WHILE : while	<Line: 9>
                LPAREN : (	<Line: 9>
                expression : logic_expression 	<Line: 9-9>
                 logic_expression : rel_expression 	<Line: 9-9>
                  rel_expression : simple_expression RELOP simple_expression 	<Line: 9-9>
                   simple_expression : term 	<Line: 9-9>
                    term : unary_expression 	<Line: 9-9>
                     unary_expression : factor 	<Line: 9-9>
                      factor : variable 	<Line: 9-9>
                       variable : ID 	<Line: 9-9>
                        ID : b	<Line: 9>
                   RELOP : >	<Line: 9>
                   simple_expression : term 	<Line: 9-9>
                    term : unary_expression 	<Line: 9-9>
                     unary_expression : factor 	<Line: 9-9>
                      factor : CONST_INT 	<Line: 9-9>
                       CONST_INT : 0	<Line: 9>
                RPAREN : )	<Line: 9>
                statement : compound_statement 	<Line: 9-14>
                 compound_statement : LCURL statements RCURL 	<Line: 9-14>
                  LCURL : {	<Line: 9>
                  statements : statements statement 	<Line: 10-13>
                   statements : statements statement 	<Line: 10-12>
                    statements : statements statement 	<Line: 10-11>
                     statements : statement 	<Line: 10-10>
                      statement : var_declaration 	<Line: 10-10>
                       var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 10-10>
                        type_specifier : INT	<Line: 10-10>
                         INT : int	<Line: 10>
                        declaration_list : ID 	<Line: 10-10>
                         ID : a	<Line: 10>
                        SEMICOLON : ;	<Line: 10>
                     statement : expression_statement 	<Line: 11-11>
                      expression_statement : expression SEMICOLON 	<Line: 11-11>
                       expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
                        variable : ID 	<Line: 11-11>
                         ID : a	<Line: 11>
                        ASSIGNOP : =	<Line: 11>
                        logic_expression : rel_expression 	<Line: 11-11>
                         rel_expression : simple_expression 	<Line: 11-11>
                          simple_expression : term 	<Line: 11-11>
                           term : unary_expression 	<Line: 11-11>
                            unary_expression : factor 	<Line: 11-11>
                             factor : variable 	<Line: 11-11>
                              variable : ID 	<Line: 11-11>
                               ID : b	<Line: 11>
                       SEMICOLON : ;	<Line: 11>
                    statement : expression_statement 	<Line: 12-12>
                     expression_statement : expression SEMICOLON 	<Line: 12-12>
                      expression : logic_expression 	<Line: 12-12>
                       logic_expression : rel_expression 	<Line: 12-12>
                        rel_expression : simple_expression 	<Line: 12-12>
                         simple_expression : term 	<Line: 12-12>
                          term : unary_expression 	<Line: 12-12>
                           unary_expression : factor 	<Line: 12-12>
                            factor : variable DECOP 	<Line: 12-12>
                             variable : ID 	<Line: 12-12>
                              ID : b	<Line: 12>
                             DECOP : --	<Line: 12>
                      SEMICOLON : ;	<Line: 12>
                   statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
                    PRINTLN : println	<Line: 13>
                    LPAREN : (	<Line: 13>
                    ID : a	<Line: 13>
                    RPAREN : )	<Line: 13>
                    SEMICOLON : ;	<Line: 13>
                  RCURL : }	<Line: 14>
              statement : expression_statement 	<Line: 15-15>
               expression_statement : expression SEMICOLON 	<Line: 15-15>
                expression : logic_expression 	<Line: 15-15>
                 logic_expression : rel_expression 	<Line: 15-15>
                  rel_expression : simple_expression 	<Line: 15-15>
                   simple_expression : term 	<Line: 15-15>
                    term : unary_expression 	<Line: 15-15>
                     unary_expression : factor 	<Line: 15-15>
                      factor : variable DECOP 	<Line: 15-15>
                       variable : ID 	<Line: 15-15>
                        ID : a	<Line: 15>
                       DECOP : --	<Line: 15>
                SEMICOLON : ;	<Line: 15>
             statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 16-16>
              PRINTLN : println	<Line: 16>
              LPAREN : (	<Line: 16>
              ID : b	<Line: 16>
              RPAREN : )	<Line: 16>
              SEMICOLON : ;	<Line: 16>
            RCURL : }	<Line: 17>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 18-18>
         PRINTLN : println	<Line: 18>
         LPAREN : (	<Line: 18>
         ID : a	<Line: 18>
         RPAREN : )	<Line: 18>
         SEMICOLON : ;	<Line: 18>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 19-19>
        PRINTLN : println	<Line: 19>
        LPAREN : (	<Line: 19>
        ID : b	<Line: 19>
        RPAREN : )	<Line: 19>
        SEMICOLON : ;	<Line: 19>
      statement : RETURN expression SEMICOLON 	<Line: 20-20>
       RETURN : return	<Line: 20>
       expression : logic_expression 	<Line: 20-20>
        logic_expression : rel_expression 	<Line: 20-20>
         rel_expression : simple_expression 	<Line: 20-20>
          simple_expression : term 	<Line: 20-20>
           term : unary_expression 	<Line: 20-20>
            unary_expression : factor 	<Line: 20-20>
             factor : CONST_INT 	<Line: 20-20>
              CONST_INT : 0	<Line: 20>
       SEMICOLON : ;	<Line: 20>
     RCURL : }	<Line: 21>
