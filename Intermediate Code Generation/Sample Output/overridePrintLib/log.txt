Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
unit : var_declaration 
program : unit 
Line# 3: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 3: Token <ID> Lexeme print_newline found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <INT> Lexeme int found
type_specifier : INT
Line# 3: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT
Line# 4: Token <ID> Lexeme i found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 5: Token <ID> Lexeme i found
Line# 5: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 5: Token <ID> Lexeme n found
Line# 5: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 5: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 5: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 6: Token <PRINTLN> Lexeme println found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <ID> Lexeme i found
Line# 6: Token <RPAREN> Lexeme ) found
Line# 6: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 7: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 2
	1--> <n,INT, Offset : 4> 
	7--> <i,INT, Offset : 2> 
	ScopeTable# 1
	10--> <a,INT, Offset : 2> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 9: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 9: Token <ID> Lexeme print_output found
Line# 9: Token <LPAREN> Lexeme ( found
Line# 9: Token <INT> Lexeme int found
type_specifier : INT
Line# 9: Token <ID> Lexeme n found
parameter_list : type_specifier ID 
Line# 9: Token <RPAREN> Lexeme ) found
Line# 9: Token <LCURL> Lexeme { found
Line# 10: Token <ID> Lexeme a found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 10: Token <ID> Lexeme n found
Line# 10: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme a found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 3
	1--> <n,INT, Offset : 4> 
	ScopeTable# 1
	2--> <print_newline,FUNCTION,VOID, Offset : -1> 
	10--> <a,INT, Offset : 2> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 14: Token <INT> Lexeme int found
type_specifier : INT
Line# 14: Token <ID> Lexeme var found
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <RPAREN> Lexeme ) found
Line# 14: Token <LCURL> Lexeme { found
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 15: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 15: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statement 
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 16: Token <ID> Lexeme a found
Line# 16: Token <ADDOP> Lexeme + found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
Line# 16: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 16: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 17: Token <RETURN> Lexeme return found
Line# 17: Token <ID> Lexeme a found
Line# 17: Token <SEMICOLON> Lexeme ; found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 18: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 4
	ScopeTable# 1
	2--> <print_newline,FUNCTION,VOID, Offset : -1> 
	3--> <print_output,FUNCTION,VOID, Offset : -1> 
	10--> <a,INT, Offset : 2> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
Line# 20: Token <INT> Lexeme int found
type_specifier : INT
Line# 20: Token <ID> Lexeme main found
Line# 20: Token <LPAREN> Lexeme ( found
Line# 20: Token <RPAREN> Lexeme ) found
Line# 20: Token <LCURL> Lexeme { found
Line# 21: Token <INT> Lexeme int found
type_specifier : INT
Line# 21: Token <ID> Lexeme i found
Line# 21: Token <SEMICOLON> Lexeme ; found
declaration_list : ID 
var_declaration : type_specifier declaration_list SEMICOLON 
statement : var_declaration 
statements : statement 
Line# 22: Token <ID> Lexeme i found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 22: Token <CONST_INT> Lexeme 10 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 22: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 23: Token <ID> Lexeme print_newline found
Line# 23: Token <LPAREN> Lexeme ( found
Line# 23: Token <ID> Lexeme i found
Line# 23: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 23: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 24: Token <ID> Lexeme i found
Line# 24: Token <ASSIGNOP> Lexeme = found
variable : ID 
Line# 24: Token <ADDOP> Lexeme - found
Line# 24: Token <CONST_INT> Lexeme 31 found
factor : CONST_INT 
unary_expression : factor 
unary_expression : ADDOP unary_expression 
term : unary_expression 
Line# 24: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : variable ASSIGNOP logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 25: Token <ID> Lexeme print_output found
Line# 25: Token <LPAREN> Lexeme ( found
Line# 25: Token <ID> Lexeme i found
Line# 25: Token <RPAREN> Lexeme ) found
variable : ID 
factor : variable 
unary_expression : factor 
term : unary_expression 
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
arguments : logic_expression 
argument_list : arguments
factor : ID LPAREN argument_list RPAREN 
unary_expression : factor 
term : unary_expression 
Line# 25: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
expression_statement : expression SEMICOLON 
statement : expression_statement 
statements : statements statement 
Line# 26: Token <PRINTLN> Lexeme println found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <ID> Lexeme a found
Line# 26: Token <RPAREN> Lexeme ) found
Line# 26: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON 
statements : statements statement 
Line# 27: Token <RETURN> Lexeme return found
Line# 27: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT 
unary_expression : factor 
term : unary_expression 
Line# 27: Token <SEMICOLON> Lexeme ; found
simple_expression : term 
rel_expression : simple_expression 
logic_expression : rel_expression 
expression : logic_expression 
statement : RETURN expression SEMICOLON 
statements : statements statement 
Line# 28: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL 
	ScopeTable# 5
	7--> <i,INT, Offset : 2> 
	ScopeTable# 1
	2--> <print_newline,FUNCTION,VOID, Offset : -1> 
	3--> <print_output,FUNCTION,VOID, Offset : -1> 
	6--> <var,FUNCTION,INT, Offset : -1> 
	10--> <a,INT, Offset : 2> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement 
unit : func_definition 
program : program unit 
start : program 
	ScopeTable# 1
	2--> <print_newline,FUNCTION,VOID, Offset : -1> <main,FUNCTION,INT, Offset : -1> 
	3--> <print_output,FUNCTION,VOID, Offset : -1> 
	6--> <var,FUNCTION,INT, Offset : -1> 
	10--> <a,INT, Offset : 2> 

Total lines: 28

Total errors: 0
