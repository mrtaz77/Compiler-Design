<VOID, void>
<ID, myFunction>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, globalVariable>
<ASSIGNOP, =>
<CONST_FLOAT, 1000.2484e-7>
<SEMICOLON, ;>
<DOUBLE, double>
<ID, globalVariable2>
<ASSIGNOP, =>
<CONST_FLOAT, .32e-7>
<SEMICOLON, ;>
<INT, int>
<ID, main>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<DOUBLE, double>
<ID, dblConstant>
<ASSIGNOP, =>
<CONST_FLOAT, .32e-2>
<SEMICOLON, ;>
<INT, int>
<ID, integerConstant>
<ASSIGNOP, =>
<CONST_INT, 10>
<SEMICOLON, ;>
<FLOAT, float>
<ID, floatConstant>
<ASSIGNOP, =>
<CONST_FLOAT, 3.14>
<SEMICOLON, ;>
<CHAR, char>
<ID, stringConstant>
<LSQUARE, [>
<RSQUARE, ]>
<ASSIGNOP, =>
<IF, if>
<LPAREN, (>
<ID, integerConstant>
<RELOP, >>
<CONST_INT, 5>
<RPAREN, )>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Integer is greater than 5.
>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Integer is less than or equal to 5.
>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<FOR, for>
<LPAREN, (>
<INT, int>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<CONST_INT, 5>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Iteration %d
>
<COMMA, ,>
<ID, i>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, counter>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, counter>
<RELOP, <>
<CONST_INT, 3>
<RPAREN, )>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Counter value: %d
>
<COMMA, ,>
<ID, counter>
<RPAREN, )>
<SEMICOLON, ;>
<ID, counter>
<INCOP, ++>
<SEMICOLON, ;>
<RCURL, }>
<SWITCH, switch>
<LPAREN, (>
<ID, charConstant>
<RPAREN, )>
<LCURL, {>
<CASE, case>
<CONST_CHAR, A>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Char constant is A.
>
<RPAREN, )>
<SEMICOLON, ;>
<BREAK, break>
<SEMICOLON, ;>
<CASE, case>
<CONST_CHAR, B>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Char constant is B.
>
<RPAREN, )>
<SEMICOLON, ;>
<BREAK, break>
<SEMICOLON, ;>
<DEFAULT, default>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Char constant is not A or B.
>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, myFunction>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RETURN, return>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, myFunction>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<ID, printf>
<LPAREN, (>
<SINGLE LINE STRING, Inside myFunction()
>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<CHAR, char>
<ID, str>
<LSQUARE, [>
<CONST_INT, 100>
<RSQUARE, ]>
<ASSIGNOP, =>
<MULTI LINE STRING, I have a " test" function.so iasked "how to test">
<SEMICOLON, ;>
<ID, dhhds>
<ID, scguefhhgdfs>
<ID, sfdgdfshudgfes>
<ID, test>
<MULOP, *>
<MULOP, />
<ID, comment>
<ID, bcd>
<CONST_FLOAT, .2>
<ID, A>
<CONST_CHAR, >
